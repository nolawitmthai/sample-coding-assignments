#include <iostream>
#include <fstream>
#include <vector>

using namespace std;

int main(int argc, char *argv[]) {

    string inputFile;
    string outputFile;
    vector<int> fileValues;
    int readValue = 0;
    char comma;
    int average = 0;
    int temp = 0;
    int NUM_VALS = 0;
    int SUM_VALS = 0;
    int i = 0;
   
    inputFile = argv[1]; // Assign to inputFile value of 2nd command line argument
    outputFile = argv[2]; // Assign to outputFile value of 3rd command line argument
   
   // Create input stream and open input csv file.
    ifstream inFS;
    inFS.open(inputFile);


   // Verify file opened correctly.
   // Output error message and return 1 if file stream did not open correctly.
    if(!inFS.is_open()) {
        cout << "Error opening " << inputFile << endl;
        exit (1);
    }
    
   
   // Read in integers from input file to vector.
    while (inFS >> readValue) {
        fileValues.push_back(readValue);
        
        inFS >> comma;
        NUM_VALS++;
    }

   // Close input stream.
    inFS.close();
   
    for (i = 0; i < NUM_VALS; i++) {
        SUM_VALS += fileValues.at(i);
    }
    
    average = (SUM_VALS) / (NUM_VALS);
       // Get integer average of all values read in.
    
    for (i = 0; i < NUM_VALS; i++) {
        fileValues.at(i) = fileValues.at(i) - average;
    }
   // Convert each value within vector to be the difference between the original value and the average.
   
    ofstream outSS;
    outSS.open(outputFile);
    
   // Create output stream and open/create output csv file.

    if(!outSS.is_open()) {
        cout << "Error opening " << outputFile << endl;
        exit (1);
    }
   // Verify file opened or was created correctly.
   // Output error message and return 1 if file stream did not open correctly.
   
    for (i = 0; i < NUM_VALS; i++) {
        if (i < NUM_VALS - 1) {
            temp = fileValues.at(i);
            outSS << temp << ",";
        }
        else if (i == NUM_VALS - 1) {
            temp = fileValues.at(i);
            outSS << temp;
        }
    }
   // Write converted values into ouptut csv file, each integer separated by a comma.
   
    outSS.close();
   // Close output stream.
   
   return 0;
}
